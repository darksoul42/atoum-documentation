=Introduction

==What is atoum ?

atoum is a unit test framework, similar to PHPunit or SimpleTest, however:
* It is more modern and makes use of the latest PHP features.
* It is simpler to use and master.
* It is more intuitive and its syntax is as close as possible to the English natural language


==Download & Install

As of now, atoum is not tagged with a version number, however it is already in a stable and usable state. If you want to use atoum, just download the last stable version. It is one of the project's main goal for atoum to provide backward compatibility.

You can install atoum in several ways :
* [[As a PHAR archive|#PHAR-Archive]] ;
* [[Using composer|#Composer]] ;
* [[Using an install script|#Installer]] ;
* [[Cloning github repository|#Github]] ;
* [[Using a symfony 1 plug-in|#Symfony-1-plugin]] ;
* [[Using a Symfony 2 Bundle|#Symfony-2-bundle]].
* [[Using Zend Framework 2 component|#Using-Zend-Framework-2-component]].


===PHAR Archive

A ??PHAR archive|PHp ARchive?? archive is automatically generated everytime there is a modification to atoum.

PHAR is a PHP application archive format, available since PHP 5.3.

====Installation

You can download the latest stable version of atoum directly from the official website : [[http://downloads.atoum.org/nightly/mageekguy.atoum.phar|http://downloads.atoum.org/nightly/mageekguy.atoum.phar]]

====Updating

Updating atoum's PHAR is easy thanks to its command line tools :

[[[shell
$ php -d phar.readonly=0 mageekguy.atoum.phar --update
]]]

{{{info
To update the current version of atoum, PHP needs to be able to update PHAR archives, which is disabled by default. This is the reason why you have to specify the option ##-d phar.readonly=0##.
}}}

If a newer version of atoum exists, it will be downloaded and installed in the archive itself :

[[[shell
$ php -d phar.readonly=0 mageekguy.atoum.phar --update
Checking if a new version is available... Done !
Update to version 'nightly-1568-201210311708'... Done !
Enable version 'nightly-1568-201210311708'... Done !
Atoum was updated to version 'nightly-1568-201210311708' successfully !
]]]

If no newer version is available, atoum will just stop without doing anything :

[[[shell
$ php -d phar.readonly=0 mageekguy.atoum.phar --update
Checking if a new version is available... Done !
There is no new version available !
]]]

atoum won't ask you for confirmation before proceeding to the update, as it is very easy to go back to a previous version.

====Listing available versions of atoum present in the archive

To display the list of versions of atoum present in the archive, please use the ##\--list-available-versions## (or the shorter ##-lav##) switch.

[[[shell
$ php mageekguy.atoum.phar -lav
nightly-941-201201011548
* nightly-1568-201210311708
]]]

Available versions will be shown. The one prefixed with a ##*## is active.

====Updating the current version

To activate a different version of atoum, use the ##\--enable-version## (or the shorter ##-ev##) argument with the name of the version you want to activate.

[[[shell
php -d phar.readonly=0 mageekguy.atoum.phar -ev DEVELOPMENT
]]]

{{{info
To update the current version of atoum, PHP needs to be able to update PHAR archives, which is disabled by default. This is the reason why you have to specify the option ##-d phar.readonly=0##.
}}}

====Removing older versions

Over time, it might happen your archive contains several unused versions of atoum.

To remove these, use the ##\--delete-version## (or shorter ##-dv##) switch, followed by the name of the version you want to remove :

[[[shell
$ php -d phar.readonly=0 mageekguy.atoum.phar -dv nightly-941-201201011548
]]]

The version will then be removed.

{{{warning
You cannot remove the active version.
}}}

{{{info
To remove a version of atoum, PHP needs to be able to update PHAR archives, which is disabled by default. This is the reason why you have to specify the option ##-d phar.readonly=0##.
}}}


===Composer

[[Composer|http://getcomposer.org/]] is a PHP dependency management tool.

First, please download and install composer :

[[[shell
$ curl -s https://getcomposer.org/installer | php
]]]

Then, create a ##composer.json## file, containing the following ??JSON|JavaScript Object Notation?? :

[[[json
{
    "require" : {
        "atoum/atoum" : "dev-master"
    }
}
]]]

Then, lastly, run the following command :

[[[shell
$ php composer.phar install
]]]

===Installer

You can also install atoum via the following specialized script [[script|https://github.com/atoum/atoum-installer]] :

[[[shell
$ curl https://raw.github.com/atoum/atoum-installer/master/installer | php -- --phar
$ php mageekguy.atoum.phar -v
atoum version nightly-xxxx-yyyymmddhhmm by Frédéric Hardy (phar:///path/to/mageekguy.atoum.phar)
]]]

This script lets you install atoum locally (in a project, as in the previous example) or system-wide :

[[[shell
$ curl https://raw.github.com/atoum/atoum-installer/master/installer | sudo php -- --phar --global
$ which atoum
/usr/local/bin/atoum
]]]

You can use many switches to customize the installation process : please check the [[documentation|https://github.com/atoum/atoum-installer/blob/master/README.md]] for more details.

===Github

You are also welcome to use atoum directly from the source code, by cloning or forking the git repository from github : [[git://github.com/atoum/atoum.git|git://github.com/atoum/atoum.git]]


===Symfony 1 plugin

If you want to use atoum in a symfony 1 project, you can do so thanks to the [[sfAtoumPlugin plugin|https://github.com/atoum/sfAtoumPlugin]]

Installation and usage instructions are available in [[the cookbook|chapitre4.html#Use-with-symfony -1.4]] and on the project's page.

===Symfony 2 bundle

If you want to use atoum in a Symfony 2 project, you can do so thanks to the [[atoum Bundle|https://github.com/atoum/AtoumBundle]].

Installation and usage instructions are available on the project's page.

===Using Zend Framework 2 component

A library is available to use atoum with Zend Framework 2. Documentation and exemples are available at the following address : [[https://github.com/blanchonvincent/zend-framework-test-atoum|https://github.com/blanchonvincent/zend-framework-test-atoum]].

Installation and usage instructions can be found there.

==A quick overview of atoum's core principles

===Very basic example

You are required to write a test class for each class you want to test.

As an example, if you want to test the famous ##HelloWorld## class, you'll have to write the ##test\units\HelloWorld test class.

{{{info
atoum is, of course, namespace aware. As an example, to test the Hello\The\World class, you'll write the \Hello\The\tests\units\World class.
}}}

Here is the code of your ##HelloWorld## class that we'll be using as a first example.

[[[php
<?php
# src/Vendor/Project/HelloWorld.php

namespace Vendor\Project;

class HelloWorld
{
    public function getHiAtoum ()
    {
        return "Hi atoum !";
    }
}
]]]

Now, let's write our first test class.

[[[php
<?php
# src/Vendor/Project/tests/units/HelloWorld.php

// Test classes have their own namespace :
// class namespace + "tests\units"
namespace Vendor\Project\tests\units;

// You have to include your tested class
require_once __DIR__ . '/../../HelloWorld.php';

use \atoum;

/*
 * Test class for \HelloWorld

 * Of notice, the fact it has the same name as the tested class,
 * and it extends from the atoum class
 */
class HelloWorld extends atoum
{
    /*
     * This method is made for the getHiAtoum() method
     */
    public function testGetHiAtoum ()
    {
        // create a new instance of the tested class
        $helloToTest = new \Vendor\Project\HelloWorld();

        $this
            // we are confirming through a test that the getHiAtoum method
            // does in fact return a string...
            ->string($helloToTest->getHiAtoum())
                // ... and that it is in fact the expected string,
                // that is, 'Hi atoum !'
                ->isEqualTo('Hi atoum !')
        ;
    }
}
]]]

Now, let's launch the tests.
This should yield the following :

[[[shell
$ php vendor/mageekguy.atoum.phar -f src/Vendor/Project/tests/units/HelloWorld.php
> PHP path: /usr/bin/php
> PHP version:
=> PHP 5.4.7 (cli) (built : Sep 13 2012 04:24:47)
=> Copyright (c) 1997-2012 The PHP Group
=> Zend Engine v2.4.0, Copyright (c) 1998-2012 Zend Technologies
=>     with Xdebug v2.2.1, Copyright (c) 2002-2012, by Derick Rethans
> Vendor\Project\tests\units\HelloWorld...
[S___________________________________________________________][1/1]
=> Test duration : 0.02 second.
=> Memory usage : 0.00 Mb.
> Total test duration: 0.02 second.
> Total test memory usage: 0.00 Mb.
> Code coverage value: 100.00%
> Running duration: 0.34 second.
Success (1 test, 1/1 method, 2 assertions, 0 error, 0 exception) !
]]]


We have just checked whether the ##getHiAtoum## method :
* does return a string ;
* and that this string is the expected ##"Hi atoum !"## string.

All tests passed. You're done, your code is rock solid !

===Rule of Thumb

When testing a value, please do the following :
* specify the value's type (integer, decimal, array, string, …) ;
* specify the constraints that must be enforced for this value (is equal to, is null, exists, …).

==Using atoum with your favorite IDE

===Sublime Text 2

A [[SublimeText 2 plugin|https://github.com/toin0u/Sublime-atoum]] enables you to launch tests and see their results directly from your IDE.

Required instructions to install and configure the plugin are available on [[the author's blog|http://sbin.dk/2012/05/19/atoum-sublime-text-2-plugin/]].

===VIM

atoum is bundled with a plugin dedicated to VIM.

It enables you to launch tests staying in VIM, and to get the matching report in the editor's screen.

You can navigate through potential errors, directly going to the line where assertions failed thanks to matching key strokes.

====Installing the VIM plugin

If you're not using the PHAR archive, you'll find the plugin in ressources/vim/atoum.vba.

If you're using the PHAR archive, you can ask atoum to extract the file with the command line

[[[shell
$ php mageekguy.atoum.phar --extractRessourcesTo path/to/a/directory
]]]

Once you got the atoum.vba file, use VIM to edit its content

[[[shell
vim path/to/atoum.vba
]]]

And ask VIM to install the plugin with

[[[vim
:source %
]]]

===Using atoum and VIM

Of course to work properly the plugin needs to be correctly installed, and you're supposed to be editing a test case based on atoum.

The following command line asks for tests execution:

[[[vim
:Atoum
]]]

Tests are launched and a report, based on your atoum configuration in ftplugin/php/atoum.vim of your .vim directory, is generated in a new screen.

Feel free to link this command with a shortcut of your own. i.e. adding the following line to your .vimrc file :

[[[vim
nnoremap *.php :Atoum
]]]

The F12 function key will now trigger the :Atoum command.

===Managing configuration file for atoum

You can specify another configuration file for atoum by adding the following line to your .vimrc file:

[[[vim
call atoum#defineConfiguration('/path/to/project/directory', '/path/to/atoum/configuration/file', '.php')
]]]

The atoum#defineConfiguration function enables you to define the configuration file to use based on your unit test directory.

Shoe takes 3 arguments :
* The path to the unit tests directory
* The path to the atoum's configuration file to be considered
* The extension of the unit test files that will be concerned.

If you want to know more on the plugin, you can use the embedded help in VIM thanks to the following command :

[[[vim
:help atoum
]]]
